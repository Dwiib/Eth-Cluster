apiVersion: apps/v1
kind: Deployment
metadata:
  name: caddy
  labels:
    app: caddy
  namespace: ens-bridge
spec:
  replicas: 1
  selector:
    matchLabels:
      app: caddy
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: caddy
    spec:
      containers:
        - name: caddy
          image: caddy:2.3.0
          securityContext:
            runAsUser: 10001
            runAsGroup: 10001
            allowPrivilegeEscalation: false
          resources:
            requests:
              memory: "128Mi"
              cpu: "500m"
            limits:
              memory: "256Mi"
              cpu: "800m"
          ports:
            - containerPort: 8080
              name: http
              protocol: "TCP"
            - containerPort: 8443
              name: https
              protocol: "TCP"
            - containerPort: 8053
              name: dns-tcp
              protocol: "TCP"
            - containerPort: 8053
              name: dns-udp
              protocol: "UDP"
            - containerPort: 8853
              name: dns-over-tls
              protocol: "TCP"
          env:
            - name: IPFS_BACKEND
              value: "ipfs-go.ens-bridge.svc.cluster.local"
          volumeMounts:
            - name: caddyfile-volume
              mountPath: /etc/caddy/Caddyfile
              subPath: Caddyfile
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
        - name: caddyfile-volume
          configMap:
            name: caddyfile
---
# Note - HTTPS is disabled as this has only been tested locally with minikube
kind: ConfigMap
apiVersion: v1
metadata:
  name: caddyfile
  namespace: ens-bridge
data:
  Caddyfile: |
    {
            http_port 8080
    }

    :8080 {
          reverse_proxy {
                  header_up Host "([-a-z0-9]+\.eth)\.swap" $1
                  to http://{$IPFS_BACKEND}
          }

          respond /health 200

          log {
                  output stdout
                  format json
          }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: caddy
  namespace: ens-bridge
spec:
  type: NodePort
  selector:
    app: caddy
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080
      nodePort: 30080
    - name: https
      protocol: TCP
      port: 443
      targetPort: 8443
      nodePort: 30443
    - name: dns-tcp
      protocol: TCP
      port: 53
      targetPort: 8053
      nodePort: 30053
    - name: dns-udp
      protocol: UDP
      port: 53
      targetPort: 8053
      nodePort: 30053
    - name: dns-over-tls
      protocol: TCP
      port: 853
      targetPort: 8853
      nodePort: 30853